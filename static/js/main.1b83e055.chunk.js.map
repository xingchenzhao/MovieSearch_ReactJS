{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","location","href","color","react_default","a","createElement","style","width","backgroundColor","key","alt","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","performSearch","searchTerm","_this2","console","log","urlString","$","ajax","success","searchResults","results","movieRows","count","currentColor","forEach","poster_path","myMovie","src_MovieRow","push","setState","rows","error","xhr","status","err","event","target","className","paddingLeft","fontSize","display","paddingTop","paddingBottom","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAmCeA,6LA5BP,IAAMC,EAAM,oCAAsCC,KAAKC,MAAMC,MAAMC,GACnEC,OAAOC,SAASC,KAAOP,mCAGvB,IAAIQ,EAAQ,UAOZ,OALIA,EADqB,IAArBP,KAAKC,MAAMM,MACH,UAEA,UAGLC,EAAAC,EAAAC,cAAA,SAAOC,MAAO,CAAEC,MAAO,OAAQC,gBAAiBN,GAASO,IAAKd,KAAKC,MAAMC,MAAMC,IAClFK,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAAEC,MAAO,UAChBJ,EAAAC,EAAAC,cAAA,OAAKK,IAAI,SAASH,MAAM,QAAQI,IAAKhB,KAAKC,MAAMC,MAAMe,cAE1DT,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAKV,KAAKC,MAAMC,MAAMgB,OACtBV,EAAAC,EAAAC,cAAA,SAAIV,KAAKC,MAAMC,MAAMiB,UACrBX,EAAAC,EAAAC,cAAA,SAAOU,KAAK,SAASC,QAASrB,KAAKsB,UAAUC,KAAKvB,MAAOwB,MAAM,oBAxBhEC,IAAMC,4BCkGdC,cA/Fb,SAAAA,EAAY1B,GAAO,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA7B,KAAA2B,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjC,KAAMC,KACDiC,MAAQ,GAoBbN,EAAKO,cAAc,KAtBFP,6EAyBLQ,GAAY,IAAAC,EAAArC,KACxBsC,QAAQC,IAAI,gCACZ,IAAMC,EAAY,sIAAwIJ,EAC1JK,IAAEC,KAAK,CACL3C,IAAKyC,EACLG,QAAS,SAACC,GACRN,QAAQC,IAAI,8BACZD,QAAQC,IAAIK,GACZ,IAAMC,EAAUD,EAAcC,QAC1BC,EAAY,GACZC,EAAQ,EACRC,EAAe,EACnBH,EAAQI,QAAQ,SAAC/C,GAEb8C,EADED,EAAQ,IAAM,EACD,EAEA,EAEjBA,IACA7C,EAAMe,WAAa,kCAAoCf,EAAMgD,YAC7D,IAAMC,EAAU3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAUtC,IAAKZ,EAAMC,GAAID,MAAOA,EAAOK,MAAOyC,IAC9DF,EAAUO,KAAKF,KAEjBd,EAAKiB,SAAS,CAAEC,KAAMT,KAExBU,MAAO,SAACC,EAAKC,EAAQC,GACnBrB,QAAQC,IAAI,uEAKEqB,GAClBtB,QAAQC,IAAIqB,EAAMC,OAAOrC,OACzB,IACMY,EAAawB,EAAMC,OAAOrC,MADZxB,KAERmC,cAAcC,oCAI1B,OACE5B,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,SAAOoD,UAAU,YACftD,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKK,IAAI,WAAWH,MAAM,KAAKI,IAAI,sBAErCR,EAAAC,EAAAC,cAAA,MAAIE,MAAM,MACVJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAAEoD,YAAa,KAA1B,qBAMRvD,EAAAC,EAAAC,cAAA,SAAOC,MAAO,CACZqD,SAAU,GACVC,QAAS,QACTrD,MAAO,QACPsD,WAAY,EACZC,cAAe,EACfJ,YAAa,IACZK,SAAUpE,KAAKqE,oBAAoB9C,KAAKvB,MAAOsE,YAAY,sBAC7DtE,KAAKkC,MAAMqB,aA1FF7B,aCOE6C,QACW,cAA7BnE,OAAOC,SAASmE,UAEe,UAA7BpE,OAAOC,SAASmE,UAEhBpE,OAAOC,SAASmE,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1b83e055.chunk.js","sourcesContent":["import React from 'react'\n\n\nclass MovieRow extends React.Component {\n    viewMovie() {\n        // console.log(\"Trying to view movie\")\n        // console.log(this.props.movie.title)\n        const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\n        window.location.href = url\n    }\n    render() {\n        var color = \"#FFFFFF\"\n        if (this.props.color === 0) {\n            color = \"#FFFFFF\"\n        } else {\n            color = \"#E0E0E0\"\n        }\n\n        return <table style={{ width: \"100%\", backgroundColor: color }} key={this.props.movie.id} >\n            <tbody >\n                <tr>\n                    <td style={{ width: \"120px\" }}>\n                        <img alt=\"poster\" width=\"120px\" src={this.props.movie.poster_src} />\n                    </td>\n                    <td>\n                        <h3>{this.props.movie.title}</h3>\n                        <p>{this.props.movie.overview}</p>\n                        <input type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\" />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    }\n}\n\nexport default MovieRow","import React, { Component } from 'react';\nimport './App.css';\nimport MovieRow from './MovieRow.js';\nimport $ from \"jquery\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n\n    // const movies = [\n    //   {\n    //     id: 0, poster_src: \"https://images-na.ssl-images-amazon.com/images/I/51EG732BV3L._SY445_.jpg\",\n    //     title: \"The Matrix\", overview: \"Neo (Keanu Reeves) believes that Morpheus (Laurence Fishburne), an elusive figure considered to be the most dangerous man alive, can answer his question -- What is the Matrix? Neo is contacted by Trinity (Carrie-Anne Moss), a beautiful stranger who leads him into an underworld where he meets Morpheus. They fight a brutal battle for their lives against a cadre of viciously intelligent secret agents. It is a truth that could cost Neo something more precious than his life.\"\n    //   },\n    //   {\n    //     id: 1, poster_src: \" https://upload.wikimedia.org/wikipedia/en/f/f9/TheAvengers2012Poster.jpg\",\n    //     title: \"The Avengers\", overview: \"this is my second overview\"\n    //   },\n\n    // ]\n    // var movieRows = []\n    // movies.forEach((movie) => {\n    //   console.log(movie.title)\n    //   const movieRow = <MovieRow movie={movie} />\n    //   movieRows.push(movieRow)\n    // })\n    // this.state = { rows: movieRows }\n    this.performSearch(\"A\")\n\n  }\n  performSearch(searchTerm) {\n    console.log(\"Perform search using movieDB\");\n    const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=b1cd3d46d2cb1a68ea7e2ef504c75536&language=en-US&page=1&include_adult=false&query=\" + searchTerm\n    $.ajax({\n      url: urlString,\n      success: (searchResults) => {\n        console.log(\"Fetched data successfully!\")\n        console.log(searchResults)\n        const results = searchResults.results\n        var movieRows = []\n        var count = 0;\n        var currentColor = 0;\n        results.forEach((movie) => {\n          if (count % 2 === 1) {\n            currentColor = 0;\n          } else {\n            currentColor = 1;\n          }\n          count++;\n          movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path\n          const myMovie = <MovieRow key={movie.id} movie={movie} color={currentColor} />\n          movieRows.push(myMovie)\n        })\n        this.setState({ rows: movieRows })\n      },\n      error: (xhr, status, err) => {\n        console.log(\"Failed to fetch data\")\n      }\n    })\n  }\n\n  searchChangeHandler(event) {\n    console.log(event.target.value)\n    const boundObject = this\n    const searchTerm = event.target.value\n    boundObject.performSearch(searchTerm)\n  }\n\n  render() {\n    return (\n      <div>\n\n        <table className=\"titleBar\">\n          <tbody>\n            <tr>\n              <td>\n                <img alt=\"web icon\" width=\"50\" src=\"video-player.svg\" />\n              </td>\n              <td width=\"8\" />\n              <td>\n                <h2 style={{ paddingLeft: 16 }}>Movies Search</h2>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <input style={{\n          fontSize: 24,\n          display: 'block',\n          width: \"99.7%\",\n          paddingTop: 8,\n          paddingBottom: 8,\n          paddingLeft: 16\n        }} onChange={this.searchChangeHandler.bind(this)} placeholder=\"Type to search...\" />\n        {this.state.rows}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}